// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace GUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// launches and quickly enters a formula with a missing dependant
        /// </summary>
        public void LaunchSpreadsheet()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetSpreadWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetSpreadWindow = ApplicationUnderTest.Launch(this.LaunchSpreadsheetParams.UINewSpreadsheetSpreadWindowExePath, this.LaunchSpreadsheetParams.UINewSpreadsheetSpreadWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 62));

            // Type '=A1+9' in 'textBoxCellContents' text box
            uITextBoxCellContentsEdit.Text = this.LaunchSpreadsheetParams.UITextBoxCellContentsEditText;

            // Type '{Enter}' in 'textBoxCellContents' text box
            Keyboard.SendKeys(uITextBoxCellContentsEdit, this.LaunchSpreadsheetParams.UITextBoxCellContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// checks that the text boxes display valid stuff
        /// </summary>
        public void AssertCellTextboxes()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UINewSpreadsheetSpreadWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxCellValueEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellValueWindow.UITextBoxCellValueEdit;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
            Assert.AreEqual(this.AssertCellTextboxesExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text, "didn\'t display right cell name");

            // Verify that the 'Text' property of 'textBoxCellValue' text box equals 'Dependant cells not set'
            Assert.AreEqual(this.AssertCellTextboxesExpectedValues.UITextBoxCellValueEditText, uITextBoxCellValueEdit.Text, "didn\'t catch missing dependancy");

            // Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
            Assert.AreEqual(this.AssertCellTextboxesExpectedValues.UITextBoxCellContentsEditText, uITextBoxCellContentsEdit.Text, "contents not displayed properly");
        }
        
        /// <summary>
        /// add a cell to a1, fixing the missing dependancy
        /// </summary>
        public void AddMoreCells()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetSpreadWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(84, 40));

            // Type '54' in 'textBoxCellContents' text box
            uITextBoxCellContentsEdit.Text = this.AddMoreCellsParams.UITextBoxCellContentsEditText;

            // Type '{Enter}' in 'textBoxCellContents' text box
            Keyboard.SendKeys(uITextBoxCellContentsEdit, this.AddMoreCellsParams.UITextBoxCellContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(84, 58));
        }
        
        /// <summary>
        /// makes sure formula's update as new data is inserted
        /// </summary>
        public void AssertFormulaUpdates()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UINewSpreadsheetSpreadWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxCellValueEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellValueWindow.UITextBoxCellValueEdit;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
            Assert.AreEqual(this.AssertFormulaUpdatesExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellValue' text box equals '63'
            Assert.AreEqual(this.AssertFormulaUpdatesExpectedValues.UITextBoxCellValueEditText, uITextBoxCellValueEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
            Assert.AreEqual(this.AssertFormulaUpdatesExpectedValues.UITextBoxCellContentsEditText, uITextBoxCellContentsEdit.Text, "contents not displayed properly");
        }
        
        /// <summary>
        /// tests saving the spreadsheet, and then opening it
        /// </summary>
        public void SaveAndOpen()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIFILEMenuItem.UISaveMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UISaveAsWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetSpreadWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            WinMenuItem uIOpenMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIFILEMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestsheetssListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uISpreadsheetPanel1Client1 = this.UITestsheetssSpreadlyWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'FILE' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(24, 17));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(36, 9));

            // Select 'testsheet.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(62, 19));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(224, 83));

            // Type 'winning' in 'textBoxCellContents' text box
            uITextBoxCellContentsEdit.Text = this.SaveAndOpenParams.UITextBoxCellContentsEditText;

            // Type '{Enter}' in 'textBoxCellContents' text box
            Keyboard.SendKeys(uITextBoxCellContentsEdit, this.SaveAndOpenParams.UITextBoxCellContentsEditSendKeys, ModifierKeys.None);

            // Click 'FILE' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(61, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(66, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(60, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(65, 55));
        }
        
        /// <summary>
        /// makes sure the opened spreadsheet generated properly
        /// </summary>
        public void AssertOpenedSpreadValues()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UITestsheetssSpreadlyWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxCellValueEdit = this.UITestsheetssSpreadlyWindow.UIItem54Window.UITextBoxCellValueEdit;
            WinEdit uITextBoxCellContentsEdit = this.UITestsheetssSpreadlyWindow.UIItem54Window1.UITextBoxCellContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
            Assert.AreEqual(this.AssertOpenedSpreadValuesExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellValue' text box equals '63'
            Assert.AreEqual(this.AssertOpenedSpreadValuesExpectedValues.UITextBoxCellValueEditText, uITextBoxCellValueEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
            Assert.AreEqual(this.AssertOpenedSpreadValuesExpectedValues.UITextBoxCellContentsEditText, uITextBoxCellContentsEdit.Text);
        }
        
        /// <summary>
        /// tests that closing a window doesn't close entire application, and tries the undo button
        /// </summary>
        public void CloseWindowAndUseUndo()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITestsheetssSpreadlyWindow.UITestsheetssSpreadlyTitleBar.UICloseButton;
            WinClient uISpreadsheetPanel1Client = this.UINewSpreadsheetSpreadWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            WinMenuItem uIItemMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIItemMenuItem;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 12));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(152, 119));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(234, 74));

            // Type '45' in 'textBoxCellContents' text box
            uITextBoxCellContentsEdit.Text = this.CloseWindowAndUseUndoParams.UITextBoxCellContentsEditText;

            // Type '{Enter}' in 'textBoxCellContents' text box
            Keyboard.SendKeys(uITextBoxCellContentsEdit, this.CloseWindowAndUseUndoParams.UITextBoxCellContentsEditSendKeys, ModifierKeys.None);

            // Click menu item numbered 4 in 'menuStrip1' menu item
            Mouse.Click(uIItemMenuItem, new Point(9, 11));
        }
        
        /// <summary>
        /// makes sure the undo works
        /// </summary>
        public void AssertUndoFunction()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UINewSpreadsheetSpreadWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxCellValueEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellValueWindow.UITextBoxCellValueEdit;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'C3'
            Assert.AreEqual(this.AssertUndoFunctionExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellValue' text box equals 'winning'
            Assert.AreEqual(this.AssertUndoFunctionExpectedValues.UITextBoxCellValueEditText, uITextBoxCellValueEdit.Text);

            // Verify that the 'Text' property of 'textBoxCellContents' text box equals 'winning'
            Assert.AreEqual(this.AssertUndoFunctionExpectedValues.UITextBoxCellContentsEditText, uITextBoxCellContentsEdit.Text, "undo did not complete correctly");
        }
        
        /// <summary>
        /// creates a new spreadsheet and opens the about window
        /// </summary>
        public void NewandAbout()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIFILEMenuItem.UINewMenuItem;
            WinMenuItem uIAboutMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIHELPMenuItem.UIAboutMenuItem;
            WinButton uIOKButton = this.UISpreadlyApplicWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'FILE' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(53, 15));

            // Click 'HELP' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(48, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(22, 13));
        }
        
        /// <summary>
        /// asserts a newly open spreadsheet window is empty
        /// </summary>
        public void AssertNewSpreadIsEmpty()
        {
            #region Variable Declarations
            WinEdit uITextBoxCellNameEdit = this.UINewSpreadsheetSpreadWindow.UIA1Window.UITextBoxCellNameEdit;
            WinEdit uITextBoxCellValueEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellValueWindow.UITextBoxCellValueEdit;
            WinEdit uITextBoxCellContentsEdit = this.UINewSpreadsheetSpreadWindow.UITextBoxCellContentsWindow.UITextBoxCellContentsEdit;
            #endregion

            // Verify that the 'Text' property of 'textBoxCellName' text box equals 'A1'
            Assert.AreEqual(this.AssertNewSpreadIsEmptyExpectedValues.UITextBoxCellNameEditText, uITextBoxCellNameEdit.Text, "a1 should be empty on a new spreadsheet");

            // Verify that the 'Text' property of 'textBoxCellValue' text box equals ''
            Assert.AreEqual(this.AssertNewSpreadIsEmptyExpectedValues.UITextBoxCellValueEditText, uITextBoxCellValueEdit.Text, "should be empty on new spreadsheet");

            // Verify that the 'Text' property of 'textBoxCellContents' text box equals ''
            Assert.AreEqual(this.AssertNewSpreadIsEmptyExpectedValues.UITextBoxCellContentsEditText, uITextBoxCellContentsEdit.Text, "new spreadsheet should be empty");
        }
        
        /// <summary>
        /// closes out an unsaved spreadsheet, triggering the warning
        /// </summary>
        public void CloseApplicationAndSaveWarning()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UINewSpreadsheetSpreadWindow.UIMenuStrip1MenuBar.UIFILEMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadlyApplicWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'FILE' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(43, 18));

            // Click 'FILE' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(37, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 16));
        }
        
        #region Properties
        public virtual LaunchSpreadsheetParams LaunchSpreadsheetParams
        {
            get
            {
                if ((this.mLaunchSpreadsheetParams == null))
                {
                    this.mLaunchSpreadsheetParams = new LaunchSpreadsheetParams();
                }
                return this.mLaunchSpreadsheetParams;
            }
        }
        
        public virtual AssertCellTextboxesExpectedValues AssertCellTextboxesExpectedValues
        {
            get
            {
                if ((this.mAssertCellTextboxesExpectedValues == null))
                {
                    this.mAssertCellTextboxesExpectedValues = new AssertCellTextboxesExpectedValues();
                }
                return this.mAssertCellTextboxesExpectedValues;
            }
        }
        
        public virtual AddMoreCellsParams AddMoreCellsParams
        {
            get
            {
                if ((this.mAddMoreCellsParams == null))
                {
                    this.mAddMoreCellsParams = new AddMoreCellsParams();
                }
                return this.mAddMoreCellsParams;
            }
        }
        
        public virtual AssertFormulaUpdatesExpectedValues AssertFormulaUpdatesExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaUpdatesExpectedValues == null))
                {
                    this.mAssertFormulaUpdatesExpectedValues = new AssertFormulaUpdatesExpectedValues();
                }
                return this.mAssertFormulaUpdatesExpectedValues;
            }
        }
        
        public virtual SaveAndOpenParams SaveAndOpenParams
        {
            get
            {
                if ((this.mSaveAndOpenParams == null))
                {
                    this.mSaveAndOpenParams = new SaveAndOpenParams();
                }
                return this.mSaveAndOpenParams;
            }
        }
        
        public virtual AssertOpenedSpreadValuesExpectedValues AssertOpenedSpreadValuesExpectedValues
        {
            get
            {
                if ((this.mAssertOpenedSpreadValuesExpectedValues == null))
                {
                    this.mAssertOpenedSpreadValuesExpectedValues = new AssertOpenedSpreadValuesExpectedValues();
                }
                return this.mAssertOpenedSpreadValuesExpectedValues;
            }
        }
        
        public virtual CloseWindowAndUseUndoParams CloseWindowAndUseUndoParams
        {
            get
            {
                if ((this.mCloseWindowAndUseUndoParams == null))
                {
                    this.mCloseWindowAndUseUndoParams = new CloseWindowAndUseUndoParams();
                }
                return this.mCloseWindowAndUseUndoParams;
            }
        }
        
        public virtual AssertUndoFunctionExpectedValues AssertUndoFunctionExpectedValues
        {
            get
            {
                if ((this.mAssertUndoFunctionExpectedValues == null))
                {
                    this.mAssertUndoFunctionExpectedValues = new AssertUndoFunctionExpectedValues();
                }
                return this.mAssertUndoFunctionExpectedValues;
            }
        }
        
        public virtual AssertNewSpreadIsEmptyExpectedValues AssertNewSpreadIsEmptyExpectedValues
        {
            get
            {
                if ((this.mAssertNewSpreadIsEmptyExpectedValues == null))
                {
                    this.mAssertNewSpreadIsEmptyExpectedValues = new AssertNewSpreadIsEmptyExpectedValues();
                }
                return this.mAssertNewSpreadIsEmptyExpectedValues;
            }
        }
        
        public UINewSpreadsheetSpreadWindow UINewSpreadsheetSpreadWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetSpreadWindow == null))
                {
                    this.mUINewSpreadsheetSpreadWindow = new UINewSpreadsheetSpreadWindow();
                }
                return this.mUINewSpreadsheetSpreadWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UITestsheetssSpreadlyWindow UITestsheetssSpreadlyWindow
        {
            get
            {
                if ((this.mUITestsheetssSpreadlyWindow == null))
                {
                    this.mUITestsheetssSpreadlyWindow = new UITestsheetssSpreadlyWindow();
                }
                return this.mUITestsheetssSpreadlyWindow;
            }
        }
        
        public UISpreadlyApplicWindow UISpreadlyApplicWindow
        {
            get
            {
                if ((this.mUISpreadlyApplicWindow == null))
                {
                    this.mUISpreadlyApplicWindow = new UISpreadlyApplicWindow();
                }
                return this.mUISpreadlyApplicWindow;
            }
        }
        #endregion
        
        #region Fields
        private LaunchSpreadsheetParams mLaunchSpreadsheetParams;
        
        private AssertCellTextboxesExpectedValues mAssertCellTextboxesExpectedValues;
        
        private AddMoreCellsParams mAddMoreCellsParams;
        
        private AssertFormulaUpdatesExpectedValues mAssertFormulaUpdatesExpectedValues;
        
        private SaveAndOpenParams mSaveAndOpenParams;
        
        private AssertOpenedSpreadValuesExpectedValues mAssertOpenedSpreadValuesExpectedValues;
        
        private CloseWindowAndUseUndoParams mCloseWindowAndUseUndoParams;
        
        private AssertUndoFunctionExpectedValues mAssertUndoFunctionExpectedValues;
        
        private AssertNewSpreadIsEmptyExpectedValues mAssertNewSpreadIsEmptyExpectedValues;
        
        private UINewSpreadsheetSpreadWindow mUINewSpreadsheetSpreadWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UITestsheetssSpreadlyWindow mUITestsheetssSpreadlyWindow;
        
        private UISpreadlyApplicWindow mUISpreadlyApplicWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LaunchSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class LaunchSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetSpreadWindowExePath = "C:\\Users\\Taylor\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetSpreadWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=A1+9' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditText = "=A1+9";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellTextboxes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellTextboxesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
        /// </summary>
        public string UITextBoxCellNameEditText = "A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellValue' text box equals 'Dependant cells not set'
        /// </summary>
        public string UITextBoxCellValueEditText = "Dependant cells not set";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
        /// </summary>
        public string UITextBoxCellContentsEditText = "=A1+9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddMoreCells'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AddMoreCellsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '54' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditText = "54";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaUpdates'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertFormulaUpdatesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
        /// </summary>
        public string UITextBoxCellNameEditText = "A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellValue' text box equals '63'
        /// </summary>
        public string UITextBoxCellValueEditText = "63";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
        /// </summary>
        public string UITextBoxCellContentsEditText = "=A1+9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SaveAndOpenParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'testsheet.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testsheet.ss";
        
        /// <summary>
        /// Type 'winning' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditText = "winning";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenedSpreadValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertOpenedSpreadValuesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'A2'
        /// </summary>
        public string UITextBoxCellNameEditText = "A2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellValue' text box equals '63'
        /// </summary>
        public string UITextBoxCellValueEditText = "63";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellContents' text box equals '=A1+9'
        /// </summary>
        public string UITextBoxCellContentsEditText = "=A1+9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseWindowAndUseUndo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CloseWindowAndUseUndoParams
    {
        
        #region Fields
        /// <summary>
        /// Type '45' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditText = "45";
        
        /// <summary>
        /// Type '{Enter}' in 'textBoxCellContents' text box
        /// </summary>
        public string UITextBoxCellContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertUndoFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertUndoFunctionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'C3'
        /// </summary>
        public string UITextBoxCellNameEditText = "C3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellValue' text box equals 'winning'
        /// </summary>
        public string UITextBoxCellValueEditText = "winning";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellContents' text box equals 'winning'
        /// </summary>
        public string UITextBoxCellContentsEditText = "winning";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNewSpreadIsEmpty'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertNewSpreadIsEmptyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellName' text box equals 'A1'
        /// </summary>
        public string UITextBoxCellNameEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellValue' text box equals ''
        /// </summary>
        public string UITextBoxCellValueEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'textBoxCellContents' text box equals ''
        /// </summary>
        public string UITextBoxCellContentsEditText = "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewSpreadsheetSpreadWindow : WinWindow
    {
        
        public UINewSpreadsheetSpreadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Spreadsheet - Spreadly";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextBoxCellContentsWindow UITextBoxCellContentsWindow
        {
            get
            {
                if ((this.mUITextBoxCellContentsWindow == null))
                {
                    this.mUITextBoxCellContentsWindow = new UITextBoxCellContentsWindow(this);
                }
                return this.mUITextBoxCellContentsWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UITextBoxCellValueWindow UITextBoxCellValueWindow
        {
            get
            {
                if ((this.mUITextBoxCellValueWindow == null))
                {
                    this.mUITextBoxCellValueWindow = new UITextBoxCellValueWindow(this);
                }
                return this.mUITextBoxCellValueWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UITextBoxCellContentsWindow mUITextBoxCellContentsWindow;
        
        private UIA1Window mUIA1Window;
        
        private UITextBoxCellValueWindow mUITextBoxCellValueWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITextBoxCellContentsWindow : WinWindow
    {
        
        public UITextBoxCellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellContents";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellContentsEdit
        {
            get
            {
                if ((this.mUITextBoxCellContentsEdit == null))
                {
                    this.mUITextBoxCellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellContentsEdit.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellName";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellNameEdit
        {
            get
            {
                if ((this.mUITextBoxCellNameEdit == null))
                {
                    this.mUITextBoxCellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell:";
                    this.mUITextBoxCellNameEdit.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITextBoxCellValueWindow : WinWindow
    {
        
        public UITextBoxCellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellValue";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellValueEdit
        {
            get
            {
                if ((this.mUITextBoxCellValueEdit == null))
                {
                    this.mUITextBoxCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUITextBoxCellValueEdit.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public UIFILEMenuItem UIFILEMenuItem
        {
            get
            {
                if ((this.mUIFILEMenuItem == null))
                {
                    this.mUIFILEMenuItem = new UIFILEMenuItem(this);
                }
                return this.mUIFILEMenuItem;
            }
        }
        
        public WinMenuItem UIItemMenuItem
        {
            get
            {
                if ((this.mUIItemMenuItem == null))
                {
                    this.mUIItemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIItemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Instance] = "4";
                    this.mUIItemMenuItem.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUIItemMenuItem;
            }
        }
        
        public UIHELPMenuItem UIHELPMenuItem
        {
            get
            {
                if ((this.mUIHELPMenuItem == null))
                {
                    this.mUIHELPMenuItem = new UIHELPMenuItem(this);
                }
                return this.mUIHELPMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFILEMenuItem mUIFILEMenuItem;
        
        private WinMenuItem mUIItemMenuItem;
        
        private UIHELPMenuItem mUIHELPMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFILEMenuItem : WinMenuItem
    {
        
        public UIFILEMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "FILE";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHELPMenuItem : WinMenuItem
    {
        
        public UIHELPMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "HELP";
            this.WindowTitles.Add("New Spreadsheet - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("New Spreadsheet - Spreadly");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestsheetssListItem UITestsheetssListItem
        {
            get
            {
                if ((this.mUITestsheetssListItem == null))
                {
                    this.mUITestsheetssListItem = new UITestsheetssListItem(this);
                }
                return this.mUITestsheetssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsheetssListItem mUITestsheetssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestsheetssListItem : WinListItem
    {
        
        public UITestsheetssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "testsheet.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestsheetssSpreadlyWindow : WinWindow
    {
        
        public UITestsheetssSpreadlyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "testsheet.ss - Spreadly";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIItem54Window UIItem54Window
        {
            get
            {
                if ((this.mUIItem54Window == null))
                {
                    this.mUIItem54Window = new UIItem54Window(this);
                }
                return this.mUIItem54Window;
            }
        }
        
        public UIItem54Window1 UIItem54Window1
        {
            get
            {
                if ((this.mUIItem54Window1 == null))
                {
                    this.mUIItem54Window1 = new UIItem54Window1(this);
                }
                return this.mUIItem54Window1;
            }
        }
        
        public UITestsheetssSpreadlyTitleBar UITestsheetssSpreadlyTitleBar
        {
            get
            {
                if ((this.mUITestsheetssSpreadlyTitleBar == null))
                {
                    this.mUITestsheetssSpreadlyTitleBar = new UITestsheetssSpreadlyTitleBar(this);
                }
                return this.mUITestsheetssSpreadlyTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIA1Window1 mUIA1Window;
        
        private UIItem54Window mUIItem54Window;
        
        private UIItem54Window1 mUIItem54Window1;
        
        private UITestsheetssSpreadlyTitleBar mUITestsheetssSpreadlyTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellName";
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellNameEdit
        {
            get
            {
                if ((this.mUITextBoxCellNameEdit == null))
                {
                    this.mUITextBoxCellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell:";
                    this.mUITextBoxCellNameEdit.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem54Window : WinWindow
    {
        
        public UIItem54Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellValue";
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellValueEdit
        {
            get
            {
                if ((this.mUITextBoxCellValueEdit == null))
                {
                    this.mUITextBoxCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellValueEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value:";
                    this.mUITextBoxCellValueEdit.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem54Window1 : WinWindow
    {
        
        public UIItem54Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBoxCellContents";
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBoxCellContentsEdit
        {
            get
            {
                if ((this.mUITextBoxCellContentsEdit == null))
                {
                    this.mUITextBoxCellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBoxCellContentsEdit.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUITextBoxCellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBoxCellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITestsheetssSpreadlyTitleBar : WinTitleBar
    {
        
        public UITestsheetssSpreadlyTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("testsheet.ss - Spreadly");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("testsheet.ss - Spreadly");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadlyApplicWindow : WinWindow
    {
        
        public UISpreadlyApplicWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadly - Application Suite";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadly - Application Suite");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadly - Application Suite");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Spreadly - Application Suite");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadly - Application Suite");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadly - Application Suite");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
